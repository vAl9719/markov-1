Q1: Run WordGramBenchmark for wordgrams of size 2-10 and record
the number of WordGram values/objects that occur more than
once as reported by the runs. For example, with WSIZE = 2,
which generates 2-grams, the output of benchmark and benchmarkShift
each indicates that the total # wordgrams generated is 177,634
and that the # unique wordgrams is 117,181

This means there are 177,634 - 117,181 = 60,453 WordGram values that
occur more than once. Find these same numbers/values for other orders
of k and complete the table below for different k-grams/different
values of WSIZE

WSIZE    # duplicates
2        60,453
3        10,756
4         1,987
5           667
6           362
7           226
8           151
9           105
10           73

Q2: Explain in your own words the conceptual differences between
the benchmark and benchmarkShift methods.
Answer these questions:

(1) Why the results of these methods should be the same in
terms of changes made to the HashSet parameter passed to each method.

(2) What are the conceptual differences between the two
benchmarking method

The conceptual differences are that benchmark uses an ArrayList which is transferred to
an array while benchmarkShift uses an array the entire time. As a result, the way various
variables are used and defined differ as well. For example, a count variable is used in benchmarkShift
that is WSIZE and increments by one each time a WordGram is added
to the Set set to count the total words. However, benchmark just returns the size of the array created
after the ArrayList, but they should be the same value given the for loop and Scanner methods executed.
They both then subtract by WSIZE (with there being no difference since the count variable started out
with value WSIZE) and add 1, so the return statement should return the same value from both values. The
Set object set (the parameter of each method) is undergoing similar methods between the two, with it
being added a WordGram throughout the file length and not accepting duplicates.
